%%	RUNNBS
% RUN NBS analyzes the output of hopf_particleswarm script.  Specifically,
% runNBS applies the directed network-based statistic (NBS) to the
% effective connectivity matrices generated by hopf_particleswarm.
% The NBS utilizes an version of cluster-based statistical methods adapted
% to network topology.  This allows the NBS to drastically reduce the
% multiple comparison problem when comparing links, thus dramatically
% improving its sensitivity to distributed effects.  However, it is no more
% sensitive to focal effects than any other method.


%%	SETUP

%% Set paths & directories

clear; clc; close all;

% Shuffle random seed.  Necessary in array parallelization to avoid
% repeating same random seed across arrays.
rng('shuffle');

% Find general path (enclosing folder of current directory)
path{1} = strsplit(pwd, '/');
path{3,1} = strjoin(path{1}(1:end-1),'/');
path{4,1} = strjoin(path{1}, '/');
path{1,1} = strjoin(path{1}(1:end-2),'/');
path{2,1} = fullfile(path{1},'MATLAB');

% Set required subdirectories
path{5,1} = fullfile(path{3},'Results','EC');
path{6,1} = fullfile(path{3},'Data','Atlases','AAL');

% Add relevant paths
addpath(genpath(fullfile(path{2}, 'BCT', 'NBS'))),


%% Load and format EC data

% Define files to load
fileName = 'LEICA90_CIC_EC_Iteration2';

% Load EC data
load(fullfile(path{5}, fileName), 'EC','I','N');
ind = logical(I);
clear loadFile

% Format EC data to NxNxM
C = EC; clear EC;
EC = zeros(N.ROI, N.ROI, sum(N.subjects));
for c = 1:N.conditions
	EC(:,:,ind(:,c)) = squeeze(C(:,:,c,ind(:,c)));
	ind(1:N.subjects(c),:) = [];
end
clear C c ind


%% Load & format network labels

% Load network labels
load(fullfile(path{6},'AAL_labels.mat'));

% Convert labels to strings
labels = strings(size(label90,1), 1);
for k = 1:size(label90,1)
	labels(k,1) = string(label90(k,:));
end
clear k label90

% Convert labels to mirrored version
labels = LR_version_symm(labels);


%% Load & format network node coordinates

% Load AAL coordinates
AALcoords = load(fullfile(path{2}, 'BCT', 'NBS', 'AAL', 'aalCOG.txt'));

% Select ROIs of interest (if necessary)
dROI = size(AALcoords,1) - N.ROI;
ind = [1:(N.ROI/2), (N.ROI/2+dROI+1):size(AALcoords,1)]';
AALcoords = AALcoords(ind,:);
clear dROI ind


%% Analyze network using directed network-based statistic (NBS)

% Set directed NBS parameters
%	C: connectivity matrices, arranged in a 3D (NxNxM) tensor
%	GLM: structure defining the GLM for analyzing connectivity tensor
GLM.perms = 5000;		% number of permutations (scalar)
GLM.X = I;				% design matrix (observations x conditions)
GLM.contrast = [1, -1];	% contrast vector (1 x conditions)
GLM.test = 'ttest';		% type of statistical test to run ('ttest' or 'ftest')
STATS.size = 'Extent';	% method to measure size of cluster significance ('Intensity' or 'Extent')
STATS.thresh = 3.1;		% threshold test statistic
STATS.alpha = 0.05;		% significance level to test

% Run NBS
nbs = NBSdirected(EC, GLM, STATS);

% Visualize results
if ~isempty(nbs)
	F(1) = figure;
	if numel(nbs) > 1
		for n = 1:numel(nbs)
			subplot(numel(nbs),1,n);
			imagesc(full(nbs{n})); colormap gray; colorbar; hold on;
		end
	else
		imagesc(full(nbs{1})); colormap gray; colorbar; hold on;
	end
end
clear c C

% Save figure
savefig(F, fullfile(path{5}, strcat(fileName, '_NBS')), 'compact');
clear F

% Save results
save(fullfile(path{5}, fileName), 'nbs','STATS','GLM', '-append');

